#! /usr/bin/python
# File name   : movedit.py
import time
import Adafruit_PCA9685
from mpu6050 import mpu6050
import Kalman_filter
import PID
import threading
import RPIservo



'''
>>> instantiation <<<
'''
X_pid = PID.PID()
X_pid.SetKp(P)
X_pid.SetKd(I)
X_pid.SetKi(D)
Y_pid = PID.PID()
Y_pid.SetKp(P)
Y_pid.SetKd(I)
Y_pid.SetKi(D)
pwm = Adafruit_PCA9685.PCA9685()
pwm.set_pwm_freq(50)
kalman_filter_X =  Kalman_filter.Kalman_filter(0.001,0.1)
kalman_filter_Y =  Kalman_filter.Kalman_filter(0.001,0.1)

try:
	sensor = mpu6050(0x68)
	mpu6050_connection = 1
except:
	mpu6050_connection = 0

'''
change these two variable to adjuest the steady status.
	   (X+)
	   /|\
  (Y+)<-+->(Y-)
	    |
	   (X-)
Example: If you want the forhead of the robot to point down,
         you need to increase the value target_X.
'''
target_X = 0
target_Y = 0


'''
Set a default pwm value for all servos.
'''
for i in range(0,16):
	exec('pwm%d=RPIservo.init_pwm%d'%(i,i))

'''
Get raw data from mpu6050.
'''
def mpu6050Test():
	while 1:
		accelerometer_data = sensor.get_accel_data()
		print('X=%f,Y=%f,Z=%f'%(accelerometer_data['x'],accelerometer_data['y'],accelerometer_data['x']))
		time.sleep(0.3)

		
def init_all():
	pwm.set_pwm(0, 0, pwm0)
	pwm.set_pwm(1, 0, pwm1)
	pwm.set_pwm(2, 0, pwm2)
	pwm.set_pwm(3, 0, pwm3)

	pwm.set_pwm(4, 0, pwm4)
	pwm.set_pwm(5, 0, pwm5)
	pwm.set_pwm(6, 0, pwm6)
	pwm.set_pwm(7, 0, pwm7)

	pwm.set_pwm(8, 0, pwm8)
	pwm.set_pwm(9, 0, pwm9)
	pwm.set_pwm(10, 0, pwm10)
	pwm.set_pwm(11, 0, pwm11)

	pwm.set_pwm(12, 0, pwm12)
	pwm.set_pwm(13, 0, pwm13)
	pwm.set_pwm(14, 0, pwm14)
	pwm.set_pwm(15, 0, pwm15)
	

init_all()

def ctrl_range(raw, max_genout, min_genout):
	if raw > max_genout:
		raw_output = max_genout
	elif raw < min_genout:
		raw_output = min_genout
	else:
		raw_output = raw
	return int(raw_output)
  def move(step_input, speed, command):
	step_I  = step_input
	step_II = step_input + 2

	if step_II > 4:
		step_II = step_II - 4
	if speed == 0:
		return

	if command == 'no':
		right_I(step_I, speed, 0)
		left_II(step_I, speed, 0)
		right_III(step_I, speed, 0)

		left_I(step_II, speed, 0)
		right_II(step_II, speed, 0)
		left_III(step_II, speed, 0)
	elif command == 'left':
		right_I(step_I, speed, 0)
		left_II(step_I, -speed, 0)
		right_III(step_I, speed, 0)

		left_I(step_II, -speed, 0)
		right_II(step_II, speed, 0)
		left_III(step_II, -speed, 0)
	elif command == 'right':
		right_I(step_I, -speed, 0)
		left_II(step_I, speed, 0)
		right_III(step_I, -speed, 0)

		left_I(step_II, speed, 0)
		right_II(step_II, -speed, 0)
		left_III(step_II, speed, 0)


def stand():
	pwm.set_pwm(0,0,300)
	pwm.set_pwm(1,0,300)
	pwm.set_pwm(2,0,300)
	pwm.set_pwm(3,0,300)
	pwm.set_pwm(4,0,300)
	pwm.set_pwm(5,0,300)
	pwm.set_pwm(6,0,300)
	pwm.set_pwm(7,0,300)
	pwm.set_pwm(8,0,300)
	pwm.set_pwm(9,0,300)
	pwm.set_pwm(10,0,300)
	pwm.set_pwm(11,0,300)


'''
---Dove---
making the servo moves smooth.
'''
def dove_Left_I(horizontal, vertical):
	if leftSide_direction:
		pwm.set_pwm(0,0,pwm0 + horizontal)
	else:
		pwm.set_pwm(0,0,pwm0 - horizontal)

	if leftSide_height:
		pwm.set_pwm(1,0,pwm1+vertical)
	else:
		pwm.set_pwm(1,0,pwm1-vertical)


def dove_Left_II(horizontal, vertical):
	if leftSide_direction:
		pwm.set_pwm(2,0,pwm2 + horizontal)
	else:
		pwm.set_pwm(2,0,pwm2 - horizontal)

	if leftSide_height:
		pwm.set_pwm(3,0,pwm3+vertical)
	else:
		pwm.set_pwm(3,0,pwm3-vertical)


def dove_Left_III(horizontal, vertical):
	if leftSide_direction:
		pwm.set_pwm(4,0,pwm4 + horizontal)
	else:
		pwm.set_pwm(4,0,pwm4 - horizontal)

	if leftSide_height:
		pwm.set_pwm(5,0,pwm5+vertical)
	else:
		pwm.set_pwm(5,0,pwm5-vertical)


def dove_Right_I(horizontal, vertical):
	if rightSide_direction:
		pwm.set_pwm(6,0,pwm6 + horizontal)
	else:
		pwm.set_pwm(6,0,pwm6 - horizontal)

	if rightSide_height:
		pwm.set_pwm(7,0,pwm7+vertical)
	else:
		pwm.set_pwm(7,0,pwm7-vertical)


def dove_Right_II(horizontal, vertical):
	if rightSide_direction:
		pwm.set_pwm(8,0,pwm8 + horizontal)
	else:
		pwm.set_pwm(8,0,pwm8 - horizontal)

	if rightSide_height:
		pwm.set_pwm(9,0,pwm9+vertical)
	else:
		pwm.set_pwm(9,0,pwm9-vertical)


def dove_Right_III(horizontal, vertical):
	if rightSide_direction:
		pwm.set_pwm(10,0,pwm10 + horizontal)
	else:
		pwm.set_pwm(10,0,pwm10 - horizontal)

	if rightSide_height:
		pwm.set_pwm(11,0,pwm11+vertical)
	else:
		pwm.set_pwm(11,0,pwm11-vertical)


def dove(step_input, speed, timeLast, dpi, command):
	step_I  = step_input
	step_II = step_input + 2

	if step_II > 4:
		step_II = step_II - 4
	
	if speed > 0:
		if step_input == 1:
			for speed_I in range(0, (speed+int(speed/dpi)), int(speed/dpi)):
				if move_stu and command == 'no':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(-speed_I, 3*speed_II)
					dove_Right_II(-speed_I, 3*speed_II)
					dove_Left_III(-speed_I, 3*speed_II)

					dove_Right_I(speed_I, -10)
					dove_Left_II(speed_I, -10)
					dove_Right_III(speed_I, -10)
					time.sleep(timeLast/dpi)
				else:
					pass

				if command == 'left':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(speed_I, 3*speed_II)
					dove_Right_II(-speed_I, 3*speed_II)
					dove_Left_III(speed_I, 3*speed_II)

					dove_Right_I(speed_I, -10)
					dove_Left_II(-speed_I, -10)
					dove_Right_III(speed_I, -10)
					time.sleep(timeLast/dpi)
				elif command == 'right':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(-speed_I, 3*speed_II)
					dove_Right_II(speed_I, 3*speed_II)
					dove_Left_III(-speed_I, 3*speed_II)

					dove_Right_I(-speed_I, -10)
					dove_Left_II(speed_I, -10)
					dove_Right_III(-speed_I, -10)
					time.sleep(timeLast/dpi)
				else:
					pass

				if move_stu == 0 and command == 'no':
					break

		elif step_input == 2:
			for speed_I in range(0, (speed+int(speed/dpi)), int(speed/dpi)):
				if move_stu and command == 'no':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(speed_II, 3*(speed-speed_II))
					dove_Right_II(speed_II, 3*(speed-speed_II))
					dove_Left_III(speed_II, 3*(speed-speed_II))

					dove_Right_I(-speed_II, -10)
					dove_Left_II(-speed_II, -10)
					dove_Right_III(-speed_II, -10)
					time.sleep(timeLast/dpi)
				else:
					pass

				if command == 'left':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(-speed_II, 3*(speed-speed_II))
					dove_Right_II(speed_II, 3*(speed-speed_II))
					dove_Left_III(-speed_II, 3*(speed-speed_II))

					dove_Right_I(-speed_II, -10)
					dove_Left_II(speed_II, -10)
					dove_Right_III(-speed_II, -10)
					time.sleep(timeLast/dpi)
				elif command == 'right':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(speed_II, 3*(speed-speed_II))
					dove_Right_II(-speed_II, 3*(speed-speed_II))
					dove_Left_III(speed_II, 3*(speed-speed_II))

					dove_Right_I(speed_II, -10)
					dove_Left_II(-speed_II, -10)
					dove_Right_III(speed_II, -10)
					time.sleep(timeLast/dpi)
				else:
					pass

				if move_stu == 0 and command == 'no':
					break
		elif step_input == 3:
			for speed_I in range(0, (speed+int(speed/dpi)), int(speed/dpi)):
				if move_stu and command == 'no':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(speed_I, -10)
					dove_Right_II(speed_I, -10)
					dove_Left_III(speed_I, -10)

					dove_Right_I(-speed_I, 3*speed_II)
					dove_Left_II(-speed_I, 3*speed_II)
					dove_Right_III(-speed_I, 3*speed_II)
					time.sleep(timeLast/dpi)
				else:
					pass

				if command == 'left':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(-speed_I, -10)
					dove_Right_II(speed_I, -10)
					dove_Left_III(-speed_I, -10)

					dove_Right_I(-speed_I, 3*speed_II)
					dove_Left_II(speed_I, 3*speed_II)
					dove_Right_III(-speed_I, 3*speed_II)
					time.sleep(timeLast/dpi)
				elif command == 'right':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(speed_I, -10)
					dove_Right_II(-speed_I, -10)
					dove_Left_III(speed_I, -10)

					dove_Right_I(speed_I, 3*speed_II)
					dove_Left_II(-speed_I, 3*speed_II)
					dove_Right_III(speed_I, 3*speed_II)
					time.sleep(timeLast/dpi)
				else:
					pass

				if move_stu == 0 and command == 'no':
					break
		elif step_input == 4:
			for speed_I in range(0, (speed+int(speed/dpi)), int(speed/dpi)):
				if move_stu and command == 'no':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(-speed_II, -10)
					dove_Right_II(-speed_II, -10)
					dove_Left_III(-speed_II, -10)

					dove_Right_I(speed_II, 3*(speed-speed_II))
					dove_Left_II(speed_II, 3*(speed-speed_II))
					dove_Right_III(speed_II, 3*(speed-speed_II))
					time.sleep(timeLast/dpi)
				else:
					pass

				if command == 'left':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(speed_II, -10)
					dove_Right_II(-speed_II, -10)
					dove_Left_III(speed_II, -10)

					dove_Right_I(speed_II, 3*(speed-speed_II))
					dove_Left_II(-speed_II, 3*(speed-speed_II))
					dove_Right_III(speed_II, 3*(speed-speed_II))
					time.sleep(timeLast/dpi)
				elif command == 'right':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(-speed_II, -10)
					dove_Right_II(speed_II, -10)
					dove_Left_III(-speed_II, -10)

					dove_Right_I(-speed_II, 3*(speed-speed_II))
					dove_Left_II(speed_II, 3*(speed-speed_II))
					dove_Right_III(-speed_II, 3*(speed-speed_II))
					time.sleep(timeLast/dpi)
				else:
					pass

				if move_stu == 0 and command == 'no':
					break
	else:
		speed = -speed
		if step_input == 1:
			for speed_I in range(0, (speed+int(speed/dpi)), int(speed/dpi)):
				if move_stu and command == 'no':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(speed_I, 3*speed_II)
					dove_Right_II(speed_I, 3*speed_II)
					dove_Left_III(speed_I, 3*speed_II)

					dove_Right_I(-speed_I, -10)
					dove_Left_II(-speed_I, -10)
					dove_Right_III(-speed_I, -10)
					time.sleep(timeLast/dpi)
				else:
					pass
		elif step_input == 2:
			for speed_I in range(0, (speed+int(speed/dpi)), int(speed/dpi)):
				if move_stu and command == 'no':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(-speed_II, 3*(speed-speed_II))
					dove_Right_II(-speed_II, 3*(speed-speed_II))
					dove_Left_III(-speed_II, 3*(speed-speed_II))

					dove_Right_I(speed_II, -10)
					dove_Left_II(speed_II, -10)
					dove_Right_III(speed_II, -10)
					time.sleep(timeLast/dpi)
				else:
					pass
		elif step_input == 3:
			for speed_I in range(0, (speed+int(speed/dpi)), int(speed/dpi)):
				if move_stu and command == 'no':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(-speed_I, -10)
					dove_Right_II(-speed_I, -10)
					dove_Left_III(-speed_I, -10)

					dove_Right_I(speed_I, 3*speed_II)
					dove_Left_II(speed_I, 3*speed_II)
					dove_Right_III(speed_I, 3*speed_II)
					time.sleep(timeLast/dpi)
				else:
					pass
		elif step_input == 4:
			for speed_I in range(0, (speed+int(speed/dpi)), int(speed/dpi)):
				if move_stu and command == 'no':
					speed_II = speed_I
					speed_I = speed - speed_I
					dove_Left_I(speed_II, -10)
					dove_Right_II(speed_II, -10)
					dove_Left_III(speed_II, -10)

					dove_Right_I(-speed_II, 3*(speed-speed_II))
					dove_Left_II(-speed_II, 3*(speed-speed_II))
					dove_Right_III(-speed_II, 3*(speed-speed_II))
					time.sleep(timeLast/dpi)
				else:
					pass

def steady_X():
	if leftSide_direction:
		pwm.set_pwm(0,0,pwm0+steady_X_set)
		pwm.set_pwm(2,0,pwm2)
		pwm.set_pwm(4,0,pwm4-steady_X_set)
	else:
		pwm.set_pwm(0,0,pwm0+steady_X_set)
		pwm.set_pwm(2,0,pwm2)
		pwm.set_pwm(4,0,pwm4-steady_X_set)

	if rightSide_direction:
		pwm.set_pwm(10,0,pwm10+steady_X_set)
		pwm.set_pwm(8,0,pwm8)
		pwm.set_pwm(6,0,pwm6-steady_X_set)
	else:
		pwm.set_pwm(10,0,pwm10-steady_X_set)
		pwm.set_pwm(8,0,pwm8)
		pwm.set_pwm(6,0,pwm6+steady_X_set)


def steady():
	global X_fix_output, Y_fix_output
	if mpu6050_connection:
		accelerometer_data = sensor.get_accel_data()
		X = accelerometer_data['x']
		X = kalman_filter_X.kalman(X)
		Y = accelerometer_data['y']
		Y = kalman_filter_Y.kalman(Y)

		X_fix_output += -X_pid.GenOut(X - target_X)
		X_fix_output = ctrl_range(X_fix_output, steady_range_Max, -steady_range_Max)

		Y_fix_output += -Y_pid.GenOut(Y - target_Y)
		Y_fix_output = ctrl_range(Y_fix_output, steady_range_Max, -steady_range_Max)

		'''
		LEFT_I
		'''	
		left_I_input = ctrl_range((X_fix_output + Y_fix_output), steady_range_Max, steady_range_Min)
		left_I(0, 35, left_I_input)

		'''
		LEFT_II
		'''
		left_II_input = ctrl_range((abs(X_fix_output*0.5)+Y_fix_output), steady_range_Max, steady_range_Min)
		left_II(0, 35, left_II_input)

		'''
		LEFT_III
		'''
		left_III_input = ctrl_range((-X_fix_output + Y_fix_output), steady_range_Max, steady_range_Min)
		left_III(0, 35, left_III_input)

		'''
		RIGHT_III
		'''
		right_III_input = ctrl_range((X_fix_output - Y_fix_output), steady_range_Max, steady_range_Min)
		right_III(0, 35, right_III_input)

		'''
		RIGHT_II
		'''
		right_II_input = ctrl_range((abs(-X_fix_output*0.5)-Y_fix_output), steady_range_Max, steady_range_Min)
		right_II(0, 35, right_II_input)

		'''
		RIGHT_I
		'''
		right_I_input = ctrl_range((-X_fix_output-Y_fix_output), steady_range_Max, steady_range_Min)
		right_I(0, 35, right_I_input)
    if __name__ == '__main__':
	step = 1
	move_stu = 1
	try:
		# '''
		while 1:
			move(step, 35, 'no')
			step += 1
			if step > 4:
				step = 1
			time.sleep(0.08)
		# '''
		'''
		while 1:
			dove(1,-35,0.01,17,'no')
			dove(2,-35,0.01,17,'no')
			dove(3,-35,0.01,17,'no')
			dove(4,-35,0.01,17,'no')
		'''

		#mpu6050Test()
		#print(sensor.get_temp())
		'''
		steady_X()
		while 1:
			steady()
			time.sleep(0.02)
		'''
		
		
		'''
		for i in range(0,9):
			look_left()
			time.sleep(1)
		for i in range(0,16):
			look_right()
			time.sleep(1)	
		time.sleep(1)
		look_home()
		'''

		
		
		#pwm.set_all_pwm(0,0)
		#pwm.set_all_pwm(0, 300)
		#time.sleep(10)
	except KeyboardInterrupt:
		pwm.set_all_pwm(0, 300)
		time.sleep(1)
		#clean_all()
	
